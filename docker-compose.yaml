services:
  postgres:
    image: postgres:15-alpine
    container_name: medusa-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medusa_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - medusa_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}", "-d", "${POSTGRES_DB:-medusa_db}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: medusa-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - medusa_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        CACHEBUST: ${CACHEBUST:-1}
    container_name: medusa-backend
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-medusa_db}?sslmode=disable
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-9000}
      WORKER_MODE: ${WORKER_MODE:-shared}
      NODE_OPTIONS: "--max-old-space-size=3072"
      STORE_CORS: ${STORE_CORS:-http://localhost:3001}
      ADMIN_CORS: ${ADMIN_CORS:-http://localhost:9000}
      AUTH_CORS: ${AUTH_CORS:-http://localhost:9000}
      TS_NODE_TRANSPILE_ONLY: "true"
      # Key will be passed via environment variables only
      MEDUSA_PUBLISHABLE_KEY: ${MEDUSA_PUBLISHABLE_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-9000}:${BACKEND_PORT:-9000}"
    networks:
      - medusa_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 120s
    # Simplified approach - no privilege operations needed
    entrypoint: ["/sbin/tini", "--"]
    command: ["/app/startup.sh"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Key service to provide publishable key via HTTP
  key-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        CACHEBUST: ${CACHEBUST:-1}
    container_name: medusa-key-service
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-medusa_db}?sslmode=disable
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - medusa_network
    restart: "no"  # Run once to get key
    # Simple key fetcher service
    command: >
      sh -c "
        echo 'Fetching publishable key from database...'
        sleep 5
        key=$$(PGPASSWORD=\"$$(echo \"$$DATABASE_URL\" | sed -n 's|.*://[^:]*:\\([^@]*\\)@.*|\\1|p')\" \\
               psql -h postgres -p 5432 \\
               -U \"$$(echo \"$$DATABASE_URL\" | sed -n 's|.*://\\([^:]*\\):.*|\\1|p')\" \\
               -d \"$$(echo \"$$DATABASE_URL\" | sed -n 's|.*/\\([^?]*\\).*|\\1|p')\" \\
               -t -c \"SELECT id FROM publishable_api_key LIMIT 1;\" 2>/dev/null | xargs || echo '')
        if [ -n \"$$key\" ]; then
          echo \"Found publishable key: $${key:0:20}...\"
          echo \"Set this in Dokploy: MEDUSA_PUBLISHABLE_KEY=$$key\"
        else
          echo \"No publishable key found in database\"
        fi
        exit 0
      "

  storefront:
    build:
      context: ./storefront
      dockerfile: Dockerfile
    container_name: medusa-storefront
    environment:
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: ${PUBLIC_BACKEND_URL:-http://backend:9000}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${STOREFRONT_PORT:-3001}
      NODE_OPTIONS: "--max-old-space-size=2048"
      # Use same key as backend
      NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY: ${MEDUSA_PUBLISHABLE_KEY:-}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${STOREFRONT_PORT:-3001}:${STOREFRONT_PORT:-3001}"
    networks:
      - medusa_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  postgres_data:
    driver: local

networks:
  medusa_network:
    driver: bridge